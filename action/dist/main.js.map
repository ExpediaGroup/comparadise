{"version":3,"sources":["../src/run.ts","../src/s3-operations.ts","../src/octokit.ts","../src/comment.ts","../src/build-comparadise-url.ts","../src/get-latest-visual-regression-status.ts","../src/disableAutoMerge.ts","../src/main.ts"],"sourcesContent":["import {\n  getInput,\n  getMultilineInput,\n  info,\n  setFailed,\n  warning\n} from '@actions/core';\nimport {\n  downloadBaseImages,\n  uploadBaseImages,\n  uploadAllImages\n} from './s3-operations';\nimport { exec } from '@actions/exec';\nimport { octokit } from './octokit';\nimport { context } from '@actions/github';\nimport * as path from 'path';\nimport { sync } from 'glob';\nimport { createGithubComment } from './comment';\nimport { getLatestVisualRegressionStatus } from './get-latest-visual-regression-status';\nimport {\n  VISUAL_REGRESSION_CONTEXT,\n  VISUAL_TESTS_FAILED_TO_EXECUTE\n} from 'shared';\nimport { buildComparadiseUrl } from './build-comparadise-url';\nimport { disableAutoMerge } from './disableAutoMerge';\n\nexport const run = async () => {\n  const runAttempt = Number(process.env.GITHUB_RUN_ATTEMPT);\n  const isRetry = runAttempt > 1;\n  const visualTestCommands = getMultilineInput('visual-test-command', {\n    required: true\n  });\n  const commitHash = getInput('commit-hash', { required: true });\n  const screenshotsDirectory = getInput('screenshots-directory');\n\n  await downloadBaseImages();\n\n  const visualTestExitCode = await Promise.all(\n    visualTestCommands.map(cmd => exec(cmd, [], { ignoreReturnCode: true }))\n  );\n  const numVisualTestFailures = visualTestExitCode.filter(\n    code => code !== 0\n  ).length;\n\n  const latestVisualRegressionStatus =\n    await getLatestVisualRegressionStatus(commitHash);\n  const screenshotsPath = path.join(process.cwd(), screenshotsDirectory);\n  const filesInScreenshotDirectory = sync(`${screenshotsPath}/**`) || [];\n  const diffFileCount = filesInScreenshotDirectory.filter(file =>\n    file.endsWith('diff.png')\n  ).length;\n  const newFilePaths = filesInScreenshotDirectory.filter(file =>\n    file.endsWith('new.png')\n  );\n  const newFileCount = newFilePaths.length;\n\n  if (numVisualTestFailures > diffFileCount) {\n    setFailed(\n      'Visual tests failed to execute successfully. Perhaps one failed to take a screenshot?'\n    );\n    return octokit.rest.repos.createCommitStatus({\n      sha: commitHash,\n      context: VISUAL_REGRESSION_CONTEXT,\n      state: 'failure',\n      description: VISUAL_TESTS_FAILED_TO_EXECUTE,\n      ...context.repo\n    });\n  }\n\n  if (diffFileCount === 0 && newFileCount === 0) {\n    info('All visual tests passed, and no diffs found!');\n\n    if (isRetry) {\n      warning(\n        'Disabling auto merge because this is a retry attempt. This is to avoid auto merging prematurely.'\n      );\n      await disableAutoMerge(commitHash);\n    } else if (latestVisualRegressionStatus?.state === 'failure') {\n      info(\n        'Skipping status update since Visual Regression status has already been set to failed.'\n      );\n      return;\n    }\n\n    return octokit.rest.repos.createCommitStatus({\n      sha: commitHash,\n      context: VISUAL_REGRESSION_CONTEXT,\n      state: 'success',\n      description: `Visual tests passed${isRetry ? ' on retry' : ''}!`,\n      ...context.repo\n    });\n  }\n\n  if (\n    latestVisualRegressionStatus?.state === 'failure' &&\n    latestVisualRegressionStatus?.description ===\n      VISUAL_TESTS_FAILED_TO_EXECUTE &&\n    !isRetry\n  ) {\n    warning(\n      'Some other Visual Regression tests failed to execute successfully, so skipping status update and comment.'\n    );\n    return;\n  }\n\n  info(\n    `${diffFileCount} visual differences found, and ${newFileCount} new images found.`\n  );\n\n  if (diffFileCount === 0 && newFileCount > 0) {\n    info(\n      `New visual tests found! ${newFileCount} images will be uploaded as new base images.`\n    );\n    await uploadBaseImages(newFilePaths);\n    return octokit.rest.repos.createCommitStatus({\n      sha: commitHash,\n      context: VISUAL_REGRESSION_CONTEXT,\n      state: 'success',\n      description: 'New base images were created!',\n      ...context.repo\n    });\n  }\n\n  await uploadAllImages();\n  await octokit.rest.repos.createCommitStatus({\n    sha: commitHash,\n    context: VISUAL_REGRESSION_CONTEXT,\n    state: 'failure',\n    description: 'A visual regression was detected. Check Comparadise!',\n    target_url: buildComparadiseUrl(),\n    ...context.repo\n  });\n  await createGithubComment();\n};\n","import { exec } from '@actions/exec';\nimport { getInput } from '@actions/core';\nimport { BASE_IMAGE_NAME, BASE_IMAGES_DIRECTORY, NEW_IMAGE_NAME } from 'shared';\nimport { map } from 'bluebird';\nimport * as path from 'path';\n\nexport const downloadBaseImages = async () => {\n  const bucketName = getInput('bucket-name', { required: true });\n  const screenshotsDirectory = getInput('screenshots-directory');\n  const packagePaths = getInput('package-paths')?.split(',');\n  if (packagePaths) {\n    return Promise.all(\n      packagePaths.map(packagePath =>\n        exec(\n          `aws s3 cp s3://${bucketName}/${BASE_IMAGES_DIRECTORY}/${packagePath} ${screenshotsDirectory}/${packagePath} --recursive`\n        )\n      )\n    );\n  }\n\n  return exec(\n    `aws s3 cp s3://${bucketName}/${BASE_IMAGES_DIRECTORY} ${screenshotsDirectory} --recursive`\n  );\n};\n\nexport const uploadAllImages = async () => {\n  const bucketName = getInput('bucket-name', { required: true });\n  const screenshotsDirectory = getInput('screenshots-directory');\n  const commitHash = getInput('commit-hash', { required: true });\n  const packagePaths = getInput('package-paths')?.split(',');\n  if (packagePaths) {\n    return map(packagePaths, packagePath =>\n      exec(\n        `aws s3 cp ${screenshotsDirectory}/${packagePath} s3://${bucketName}/${commitHash}/${packagePath} --recursive`\n      )\n    );\n  }\n\n  return exec(\n    `aws s3 cp ${screenshotsDirectory} s3://${bucketName}/${commitHash} --recursive`\n  );\n};\n\nexport const uploadBaseImages = async (newFilePaths: string[]) => {\n  const bucketName = getInput('bucket-name', { required: true });\n  return map(newFilePaths, newFilePath =>\n    exec(\n      `aws s3 cp ${newFilePath} s3://${bucketName}/${buildBaseImagePath(newFilePath)}`\n    )\n  );\n};\n\nfunction buildBaseImagePath(newFilePath: string) {\n  const screenshotsDirectory = getInput('screenshots-directory');\n  return path.join(\n    BASE_IMAGES_DIRECTORY,\n    newFilePath\n      .replace(screenshotsDirectory, '')\n      .replace(`${NEW_IMAGE_NAME}.png`, `${BASE_IMAGE_NAME}.png`)\n  );\n}\n","import { getOctokit } from '@actions/github';\nimport { getInput } from '@actions/core';\n\nexport const octokit = getOctokit(getInput('github-token'));\n","import { octokit } from './octokit';\nimport { context } from '@actions/github';\nimport { getInput } from '@actions/core';\nimport { buildComparadiseUrl } from './build-comparadise-url';\n\nexport const createGithubComment = async () => {\n  const commitHash = getInput('commit-hash', { required: true });\n  const comparadiseHost = getInput('comparadise-host');\n  const comparadiseUrl = buildComparadiseUrl();\n  const comparadiseLink = comparadiseHost\n    ? `[Comparadise](${comparadiseUrl})`\n    : 'Comparadise';\n  const comparadiseBaseComment = `**Visual tests failed!**\\nCheck out the diffs on ${comparadiseLink}! :palm_tree:`;\n  const comparadiseCommentDetails = getInput('comment-details');\n  const comparadiseComment = comparadiseCommentDetails\n    ? `${comparadiseBaseComment}\\n${comparadiseCommentDetails}`\n    : comparadiseBaseComment;\n\n  const { data } =\n    await octokit.rest.repos.listPullRequestsAssociatedWithCommit({\n      commit_sha: commitHash,\n      ...context.repo\n    });\n  const prNumber = data.find(Boolean)?.number ?? context.issue.number;\n\n  const { data: comments } = await octokit.rest.issues.listComments({\n    issue_number: prNumber,\n    ...context.repo\n  });\n  const githubActionsCommentBodies = comments.map(comment => comment.body);\n  const comparadiseCommentExists = githubActionsCommentBodies.some(body =>\n    body?.includes(comparadiseBaseComment)\n  );\n  if (!comparadiseCommentExists) {\n    await octokit.rest.issues.createComment({\n      body: comparadiseComment,\n      issue_number: prNumber,\n      ...context.repo\n    });\n  }\n};\n","import { getInput } from '@actions/core';\nimport { context } from '@actions/github';\n\nexport const buildComparadiseUrl = () => {\n  const bucketName = getInput('bucket-name', { required: true });\n  const commitHash = getInput('commit-hash', { required: true });\n  const comparadiseHost = getInput('comparadise-host');\n  const { owner, repo } = context.repo;\n\n  return `${comparadiseHost}/?hash=${commitHash}&owner=${owner}&repo=${repo}&bucket=${bucketName}`;\n};\n","import { octokit } from './octokit';\nimport { context } from '@actions/github';\nimport { VISUAL_REGRESSION_CONTEXT } from 'shared';\n\nexport const getLatestVisualRegressionStatus = async (commitHash: string) => {\n  const { data } = await octokit.rest.repos.listCommitStatusesForRef({\n    ref: commitHash,\n    ...context.repo\n  });\n\n  return data.find(status => status.context === VISUAL_REGRESSION_CONTEXT);\n};\n","import { octokit } from './octokit';\nimport { warning } from '@actions/core';\nimport { context } from '@actions/github';\n\nexport const disableAutoMerge = async (commitHash: string) => {\n  try {\n    const { data } =\n      await octokit.rest.repos.listPullRequestsAssociatedWithCommit({\n        commit_sha: commitHash,\n        ...context.repo\n      });\n    const pullRequest = data.find(Boolean);\n    if (!pullRequest) {\n      warning(\n        'Auto merge could not be disabled - could not find pull request from commit hash.'\n      );\n      return;\n    }\n    return await octokit.graphql(`\n    mutation {\n      disablePullRequestAutoMerge(input: { pullRequestId: \"${pullRequest.node_id}\"}) {\n        clientMutationId\n      }\n    }\n  `);\n  } catch (error) {\n    warning(\n      'Auto merge could not be disabled, probably because it is disabled for this repo.'\n    );\n    warning(error as Error);\n  }\n};\n","import { run } from './run';\n\nrun();\n"],"mappings":"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","names":["import_core","import_exec","import_core","import_github","path","import_github","import_core","import_core","import_github","import_github","import_shared","import_shared","import_core","import_github"]}